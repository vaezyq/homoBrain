"""
There are some debug blocks generated by dti-generating program, aiming to check the correctness of the simulation
program. These connections may not be covered by the sparse-stored route table.

This python program checks the uncovered connections and add them to the route table. Noted that the debug blocks
have little impact on communication latency, so they only need to be added to level 1 routing without forwarding.
"""

import numpy as np
import pickle
import time
from parallelism import Parallelism


class UpdateRouteDebugBlocks(Parallelism):
    def __init__(self):
        super().__init__()

        self.block_path = '/public/home/ssct004t/project/spiking_nn_for_brain_simulation/dti_8k_40G/single/'
        self.route_sparse_pkl_path = self.route_path + 'route_sparse.pkl'

        if self.rank == self.master_rank:
            self.new_connection = list()
            with open(self.route_sparse_pkl_path, 'rb') as f:
                self.old_route_pkl = pickle.load(f)

    def update_route(self):
        with open(self.route_path + 'new_connection.pkl', 'rb') as f:
            updated_route = pickle.load(f)

        with open(self.route_path + 'route_sparse.pkl', 'rb') as f:
            route_sparse_pkl = pickle.load(f)

        pass

    def check_debug_connections(self):
        if self.rank == self.comm_size - 1:
            time1 = time.time()
            for i in range(self.N):
                msg = self.comm.recv(source=i % (self.comm_size - 1))
                print('block %d received.' % i)
                self.new_connection.append(msg)

            with open('new_connection.pkl', 'wb') as f:
                pickle.dump(self.new_connection, f)
            time2 = time.time()
            print('new_connection.pkl saved. %.2f seconds consumed.' % (time2 - time1))
        else:
            blocks_idx = self.allocate_idx_to_calculate()
            for block_idx in blocks_idx:
                block_name = 'block_' + str(block_idx) + '.npz'
                block = np.load(self.block_path + block_name)
                input_block_idx = block['input_block_idx']
                output = np.unique(input_block_idx) + block_idx
                assert np.max(output) < self.N and np.min(output) >= 0

                self.comm.send(output, dest=self.master_rank)


if __name__ == '__main__':
    Job = UpdateRouteDebugBlocks()
    Job.check_debug_connections()
